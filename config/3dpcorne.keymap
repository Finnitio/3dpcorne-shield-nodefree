#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

#include "zmk-nodefree-config/helper.h"
#include "zmk-nodefree-config/keypos_def/keypos_42keys.h"
#include "zmk-nodefree-config/international_chars/german.dtsi"

/* layer and key shortcuts */

#define ___ &trans
#define xxx &none

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define SYM 1
#define NAVNUM 2
#define FKEYBT 3
#define GAMING 4
#define SOLIDWORKS 5

/* custom behaviors */

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmroe, &kp, &de_oe, KEYS_L THUMBS)  // right-hand HRMs

// tap: num-word | double-tap: sticky num-layer | hold: num-layer

#define SMART_NUM &smart_num NAVNUM 0

ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NAVNUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NAVNUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL PG_UP PG_DN UP DOWN LEFT RIGHT HOME END K_VOLUME_UP K_VOLUME_DOWN RSHFT LALT LCTRL LGUI >;
};

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

#define SYM_HT &sym_ht SYM SYM

ZMK_BEHAVIOR(sym_ht, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&sl>;
)

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2>;
)

// tap: backspace | shift + tap: delete
ZMK_BEHAVIOR(bs_del, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// windows sleep macro
ZMK_BEHAVIOR(win_sleep, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp LG(X) &kp R &kp E>;
)

// windows right
ZMK_BEHAVIOR(winright, macro,
    bindings = <&macro_press &kp LGUI>, <&macro_tap &kp RIGHT>, <&macro_release &kp LGUI>;
)
// windows left
ZMK_BEHAVIOR(winleft, macro,
    bindings = <&macro_press &kp LGUI>, <&macro_tap &kp LEFT>, <&macro_release &kp LGUI>;
)
// windows ctrl right
ZMK_BEHAVIOR(winctrlight, macro,
    bindings = <&macro_press &kp LGUI>, <&macro_press &kp LCTRL>, <&macro_tap &kp RIGHT>, <&macro_release &kp LGUI>, <&macro_release &kp LCTRL>;
)
// windows ctrl
ZMK_BEHAVIOR(winctrlleft, macro,
    bindings = <&macro_press &kp LGUI>,<&macro_press &kp LCTRL>, <&macro_tap &kp LEFT>, <&macro_release &kp LGUI>, <&macro_release &kp LCTRL>;
)
// windows paste
ZMK_BEHAVIOR(winpaste, macro,
    bindings = <&macro_press &kp LGUI>, <&macro_tap &kp V>, <&macro_release &kp LGUI>;
)
// euro sign
ZMK_UNICODE_SINGLE(euro_sign, N2, N0, A, C)  // €

#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: qmark | shift + tap: excl
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// combos
#undef COMBO_TERM
#define COMBO_TERM 100  // timeout of 50ms (default is 30ms if omitted)
//ZMK_COMBO(combo_sleep,        &win_sleep, RT4 RT5, DEF)  // custom sleep macro, active on all layers
ZMK_COMBO(combo_copy,         &kp LC(C),  LB2 LB3, DEF)  // Ctrl + V, active on all layers
ZMK_COMBO(combo_paste,        &kp LC(V),  LB1 LB2, DEF)  // Ctrl + V, active on all layers
ZMK_COMBO(combo_winpaste,     &winpaste,  LB0 LB1, DEF)  // Win + V, active on all layers
ZMK_COMBO(combo_winctrlright, &winctrlright, LH1, LT1 LT2, DEF)  // Win + CTRL + Right, active on all layers
ZMK_COMBO(combo_winctrlleft,  &winctrlleft,  LH1, LT2 LT3, DEF)  // Win + CTRL + Left, active on all layers
ZMK_COMBO(combo_winright,     &winright,  LT1 LT2, DEF)  // Win + Right, active on all layers
ZMK_COMBO(combo_winleft,      &winleft,  LT2 LT3, DEF)  // Win + Left, active on all layers
ZMK_COMBO(combo_LT3,          &to FKEYBT,    RT2 RT3, DEF)  //Always go to Layer FKEYS&BT
ZMK_COMBO(combo_LT4,          &to GAMING,    RT0 RT1, DEF)  //Always go to Layer Gaming

/* keymap */

ZMK_LAYER(default_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &kp ESC       &kp Q         &kp W         &kp E         &kp R         &kp T               &kp Z         &kp U         &kp I         &kp O         &kp P         &de_ue
     // ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤
         &kp TAB       &hml LGUI A   &hml LCTRL S  &hml LALT D   &hml LSHFT F  &kp G               &kp H         &hmr RSHFT J  &hmr LALT K   &hmr LCTRL L  &hmroe LGUI 0 &de_ae
     // ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤
         &swapper      &kp Y         &kp X         &kp C         &kp V         &kp B               &kp N         &kp M         &comma_morph  &dot_morph    &qexcl        &kp MINUS
     // ╰─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╯
                                                   SYM_HT       &smart_shft    &kp RET              SMART_NUM     &kp SPACE     &bs_del
     //                                           ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(sym_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         xxx           xxx           xxx           xxx           xxx           xxx               &kp BSLH      &kp RPAR      &kp RBRC      &kp  LBKT     &kp SQT       xxx
     // ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤
         &kp CARET     &kp AMPERSAND &kp HASH      &kp DOLLAR    &euro_sign    &kp PERCENT       &kp FSLH      &kp LPAR      &kp LBRC      &kp  RBKT     &kp DQT       xxx
     // ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤
          xxx          xxx            xxx          xxx           xxx           xxx               &kp TILDE     &kp HASH      &kp PIPE      xxx           xxx           xxx
     // ╰─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╯
                                                   xxx           xxx           xxx               xxx           xxx           xxx
     //                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(navnum_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          ___          ___           &kp PG_UP     &kp UP        &kp PG_DN     &kp C_VOL_UP      &kp DOT       &kp N7        &kp N8        &kp N9        &kp PLUS      &kp STAR
     // ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤
          ___          &kp LCTRL     &kp LEFT      &kp DOWN      &kp RIGHT     &kp C_VOL_DN      &kp COMMA     &hmr RSHFT N4 &hmr LALT N5  &hmr LCTRL N6 &hmr LGUI MINUS &kp FSLH
     // ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤
          ___          ___           &kp HOME      &kp K_APP     &kp END       ___               &kp N0        &kp N1        &kp N2        &kp N3        &kp EQUAL     xxx
     // ╰─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╯
                                                   ___           ___           ___               ___           ___           ___
     //                                           ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(fkeysbt_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  xxx                 &kp F12       &kp F7        &kp F8        &kp F9        xxx           xxx
     // ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤
         xxx           xxx           xxx           xxx           xxx           xxx                 &kp F11       &kp F4        &kp F5        &kp F6        xxx           xxx
     // ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤
         &bt BT_CLR    xxx           xxx           xxx           xxx           &ext_power EP_OFF   &kp F10       &kp F1        &kp F2        &kp F3        xxx           xxx
     // ╰─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╯
                                                   xxx           xxx           xxx                 &to DEF       xxx           xxx
     //                                           ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(gaming_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &kp ESC       &kp TAB       &kp Q         &kp W         &kp E         &kp N1              xxx           xxx           xxx           xxx           xxx           xxx
     // ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤
         &kp B         &kp LSHFT     &kp A         &kp S         &kp D         &kp N2              xxx           xxx           xxx           xxx           xxx           xxx
     // ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────┤
         xxx           &kp LCTRL     &kp X         &kp C         &kp V         &kp N3              xxx           xxx           xxx           xxx           xxx           xxx
     // ╰─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╯
                                                   &kp LSHFT     &kp LSHFT     &kp SPACE           &to DEF       xxx           xxx
     //                                           ╰─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────╯
)